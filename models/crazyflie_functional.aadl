package Crazyflie_functional

-- This package models the abstract functional chain of the Crazyflie,
-- from https://wiki.bitcraze.io/doc:crazyflie:dev:fimware:sensor_to_control

public

  abstract Accelero
  features
    Accelero_Out : out data port;

  flows
    f1 : flow source Accelero_Out {latency => 100 us .. 300 us; };		

  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz
  -- Doug Mead begin of addition for question Q9
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;
    
  -- Doug Mead begin of addition for question Q12
    error propagations
		-- outgoing error propagation
		Accelero_out: out propagation {ValueError};
    flows
		--When the sensor fails, its error is propagated through port Accelero_Out
		ErrorSource: error source Accelero_out {ValueError} when {ValueError};
	end propagations;
  -- Doug Mead end of addition for question Q12
    
    properties
    	EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
 										Distribution => Poisson;] applies to Failed;
 		EMV2::severity => 2 applies to Failed;
		EMV2::likelihood => C applies to Failed;
		EMV2::hazards =>
		([ crossreference => "";
		failure => "Loss of sensor readings";
		phases => ("all");
		description => "Accelero failure";
		comment => "May be critical as no redundancy on UAV";
		]) applies to Failed;
  **};
  -- Doug Mead end of addition for question Q9
  end Accelero;

  abstract Gyro
  features
    Gyro_Out : out data port;
    
  flows
    f1 : flow source Gyro_Out {latency => 100 us .. 300 us; };		
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz
  -- Doug Mead begin of addition for question Q9
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;
    
  -- Doug Mead begin of addition for question Q12
    error propagations
		-- outgoing error propagation
		Gyro_Out: out propagation {ValueError};
    flows
		--When the sensor fails, its error is propagated through port Accelero_Out
		ErrorSource: error source Gyro_Out {ValueError} when {ValueError};
	end propagations;
  -- Doug Mead end of addition for question Q12
    
    properties
    	EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
 										Distribution => Poisson;] applies to Failed;
 		EMV2::severity => 2 applies to Failed;
		EMV2::likelihood => C applies to Failed;
		EMV2::hazards =>
		([ crossreference => "";
		failure => "Loss of sensor readings";
		phases => ("all");
		description => "Gyro failure";
		comment => "May be critical as no redundancy on UAV";
		]) applies to Failed;
  **};
  -- Doug Mead end of addition for question Q9
  end Gyro;

  abstract Magneto
  features
    Magneto_Out : out data port;
    
 flows
   f1 : flow source Magneto_Out {latency => 100 us .. 300 us; };		
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz
  -- Doug Mead begin of addition for question Q9
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;
    
  -- Doug Mead begin of addition for question Q12
    error propagations
		-- outgoing error propagation
		Magneto_Out: out propagation {ValueError};
    flows
		--When the sensor fails, its error is propagated through port Accelero_Out
		ErrorSource: error source Magneto_Out {ValueError} when {ValueError};
	end propagations;
  -- Doug Mead end of addition for question Q12
    
    properties
    	EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
 										Distribution => Poisson;] applies to Failed;
 		EMV2::severity => 2 applies to Failed;
		EMV2::likelihood => C applies to Failed;
		EMV2::hazards =>
		([ crossreference => "";
		failure => "Loss of sensor readings";
		phases => ("all");
		description => "Magneto failure";
		comment => "May be critical as no redundancy on UAV";
		]) applies to Failed;
  **};
  -- Doug Mead end of addition for question Q9
  end Magneto;

  abstract Sensor_Fusion
  features
    Accelero_In : in data port;
    Gyro_In     : in data port;
    Magneto_In  : in data port;
    Data_F_Out  : out data port; -- Fusioned data
    
  flows
    f1 : flow path Accelero_In -> Data_F_Out {latency => 200 us .. 400 us; };	
    f2 : flow path Gyro_In -> Data_F_Out {latency => 200 us .. 400 us; };
    	   
  properties
    Dispatch_Protocol => Periodic;
    Period => 4 ms; --  250 Hz
    
  -- Doug Mead begin of addition for question Q13
	annex EMV2 {**
	use types Crazyflie_Errors;
	use behavior Crazyflie_Errors::simple;
	
	error propagations
		Accelero_In : in propagation {ValueError};
		Gyro_In : in propagation {ValueError};
		Magneto_In : in propagation {ValueError};
		Data_F_Out : out propagation {ValueError};
	flows
		f1 : error path Accelero_In -> Data_F_Out;
		f2 : error path Gyro_In -> Data_F_Out;
		f3 : error path Magneto_In -> Data_F_Out;
	end propagations;
	
	component error behavior
		transitions
		t1 : Operational -[ Accelero_In ]-> Failed;
		t2 : Operational -[ Gyro_In ]-> Failed;
		t3 : Operational -[ Magneto_In ]-> Failed;
		
	propagations
		Failed -[]-> Data_F_Out{ValueError};
	end component;
	**};
  -- Doug Mead end of addition for question Q13
  end Sensor_Fusion;

  abstract Controller
  features
    Data_F_In : in data port;
    Gyro_In   : in data port;
    Motor_Out : out data port;
    TC : in data port;
  flows
  	f1 : flow path Data_F_In -> Motor_Out {latency => 200 us .. 400 us; };	
    f2 : flow path Gyro_In -> Motor_Out {latency => 200 us .. 400 us; };	
    
  properties
    Dispatch_Protocol => Periodic;
    Period => 2 ms; --  500 Hz
  end Controller;

  abstract Motors
  features
    Motor_In : in data port;
    
  flows
    f1 : flow sink Motor_In {latency => 100 us .. 500 us; };
    			
  properties
--    Dispatch_Protocol => Aperiodic;
    Dispatch_Protocol => Periodic;
    Period => 2ms;
  -- Doug Mead begin of addition for question Q9
  annex emv2 {**
    use types Crazyflie_Errors;
    use behavior Crazyflie_Errors::simple;
    
    properties
    	EMV2::OccurrenceDistribution => [ ProbabilityValue => 1.0e-9 ;
 										Distribution => Poisson;] applies to Failed;
 		EMV2::severity => 1 applies to Failed;
		EMV2::likelihood => C applies to Failed;
		EMV2::hazards =>
		([ crossreference => "";
		failure => "Loss of motors";
		phases => ("all");
		description => "Motors failure";
		comment => "Critical failure. Cannot fly without motors";
		]) applies to Failed;
  **};
  -- Doug Mead end of addition for question Q9
  end Motors;

  abstract Pilot
  features
	Order : out data port;
  end Pilot;

  system Crazyflie_Functional_Chain
  end Crazyflie_Functional_Chain;

  system implementation Crazyflie_Functional_Chain.impl
  subcomponents
    --  Sensing
    Acc        : abstract Accelero;
    Gyro       : abstract Gyro;
    Magneto    : abstract Magneto;

    Pilot      : abstract Pilot;

    --  Computing
    Fusion     : abstract Sensor_Fusion;
    Controller : abstract Controller;

    --  Acting
    Motors : abstract Motors;

  connections
    C1 : port Acc.Accelero_Out     -> Fusion.Accelero_In;
    C2 : port Gyro.Gyro_Out        -> Fusion.Gyro_In;
    C3 : port Magneto.Magneto_Out  -> Fusion.Magneto_In;

    C4 : port Gyro.Gyro_Out        -> Controller.Gyro_In;
    C5 : port Fusion.Data_F_Out    -> Controller.Data_F_In;

    C6 : port Controller.Motor_Out -> Motors.Motor_In;

    C7 : port Pilot.Order -> Controller.TC;

  flows
  	f_etef1 : end to end flow Gyro.f1 -> C2 -> Fusion.f2 -> C5 -> Controller.f1 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};
  	f_etef1bis : end to end flow Gyro.f1 -> C4 -> Controller.f2 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};
    f_etef2 : end to end flow Acc.f1 -> C1 -> Fusion.f1 -> C5 -> Controller.f1 -> C6 -> Motors.f1 { latency => 0 ms .. 2 ms;};
-- Doug Mead end of addition for question Q11
  annex EMV2 {**
	use types Crazyflie_Errors;
	use behavior Crazyflie_Errors::simple;
	composite error behavior
		states
		-- Sensors Operational
		[ Acc.Operational
		and Gyro.Operational
		and Magneto.Operational
		]-> Operational;
		
		-- Sensors Failed (OR gate)
		[ Acc.Failed ]-> Failed;
		[ Gyro.Failed ]-> Failed;
		[ Magneto.Failed ]-> Failed;
		
		-- Motors
		[ Motors.Operational
		]-> Operational;
		[ Motors.Failed
		]-> Failed;
	end composite;
  **};
-- Doug Mead end of addition for question Q11
  end Crazyflie_Functional_Chain.impl;

end Crazyflie_functional;